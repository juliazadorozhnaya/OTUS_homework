// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: internal/server/grpc/EventService.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EventService_SelectEvents_FullMethodName         = "/EventService/SelectEvents"
	EventService_CreateEvent_FullMethodName          = "/EventService/CreateEvent"
	EventService_UpdateEvent_FullMethodName          = "/EventService/UpdateEvent"
	EventService_DeleteEvent_FullMethodName          = "/EventService/DeleteEvent"
	EventService_SelectEventsForDay_FullMethodName   = "/EventService/SelectEventsForDay"
	EventService_SelectEventsForWeek_FullMethodName  = "/EventService/SelectEventsForWeek"
	EventService_SelectEventsForMonth_FullMethodName = "/EventService/SelectEventsForMonth"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	SelectEvents(ctx context.Context, in *Void, opts ...grpc.CallOption) (EventService_SelectEventsClient, error)
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error)
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error)
	DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error)
	SelectEventsForDay(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (EventService_SelectEventsForDayClient, error)
	SelectEventsForWeek(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (EventService_SelectEventsForWeekClient, error)
	SelectEventsForMonth(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (EventService_SelectEventsForMonthClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) SelectEvents(ctx context.Context, in *Void, opts ...grpc.CallOption) (EventService_SelectEventsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_SelectEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSelectEventsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SelectEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceSelectEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceSelectEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, EventService_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, EventService_UpdateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, EventService_DeleteEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) SelectEventsForDay(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (EventService_SelectEventsForDayClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[1], EventService_SelectEventsForDay_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSelectEventsForDayClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SelectEventsForDayClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceSelectEventsForDayClient struct {
	grpc.ClientStream
}

func (x *eventServiceSelectEventsForDayClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) SelectEventsForWeek(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (EventService_SelectEventsForWeekClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[2], EventService_SelectEventsForWeek_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSelectEventsForWeekClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SelectEventsForWeekClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceSelectEventsForWeekClient struct {
	grpc.ClientStream
}

func (x *eventServiceSelectEventsForWeekClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) SelectEventsForMonth(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (EventService_SelectEventsForMonthClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[3], EventService_SelectEventsForMonth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSelectEventsForMonthClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SelectEventsForMonthClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceSelectEventsForMonthClient struct {
	grpc.ClientStream
}

func (x *eventServiceSelectEventsForMonthClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	SelectEvents(*Void, EventService_SelectEventsServer) error
	CreateEvent(context.Context, *Event) (*Void, error)
	UpdateEvent(context.Context, *Event) (*Void, error)
	DeleteEvent(context.Context, *Event) (*Void, error)
	SelectEventsForDay(*DateRequest, EventService_SelectEventsForDayServer) error
	SelectEventsForWeek(*DateRequest, EventService_SelectEventsForWeekServer) error
	SelectEventsForMonth(*DateRequest, EventService_SelectEventsForMonthServer) error
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct{}

func (UnimplementedEventServiceServer) SelectEvents(*Void, EventService_SelectEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectEvents not implemented")
}

func (UnimplementedEventServiceServer) CreateEvent(context.Context, *Event) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}

func (UnimplementedEventServiceServer) UpdateEvent(context.Context, *Event) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}

func (UnimplementedEventServiceServer) DeleteEvent(context.Context, *Event) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}

func (UnimplementedEventServiceServer) SelectEventsForDay(*DateRequest, EventService_SelectEventsForDayServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectEventsForDay not implemented")
}

func (UnimplementedEventServiceServer) SelectEventsForWeek(*DateRequest, EventService_SelectEventsForWeekServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectEventsForWeek not implemented")
}

func (UnimplementedEventServiceServer) SelectEventsForMonth(*DateRequest, EventService_SelectEventsForMonthServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectEventsForMonth not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_SelectEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).SelectEvents(m, &eventServiceSelectEventsServer{ServerStream: stream})
}

type EventService_SelectEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceSelectEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceSelectEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_SelectEventsForDay_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).SelectEventsForDay(m, &eventServiceSelectEventsForDayServer{ServerStream: stream})
}

type EventService_SelectEventsForDayServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceSelectEventsForDayServer struct {
	grpc.ServerStream
}

func (x *eventServiceSelectEventsForDayServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_SelectEventsForWeek_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).SelectEventsForWeek(m, &eventServiceSelectEventsForWeekServer{ServerStream: stream})
}

type EventService_SelectEventsForWeekServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceSelectEventsForWeekServer struct {
	grpc.ServerStream
}

func (x *eventServiceSelectEventsForWeekServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_SelectEventsForMonth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).SelectEventsForMonth(m, &eventServiceSelectEventsForMonthServer{ServerStream: stream})
}

type EventService_SelectEventsForMonthServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceSelectEventsForMonthServer struct {
	grpc.ServerStream
}

func (x *eventServiceSelectEventsForMonthServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SelectEvents",
			Handler:       _EventService_SelectEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SelectEventsForDay",
			Handler:       _EventService_SelectEventsForDay_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SelectEventsForWeek",
			Handler:       _EventService_SelectEventsForWeek_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SelectEventsForMonth",
			Handler:       _EventService_SelectEventsForMonth_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/server/grpc/EventService.proto",
}

const (
	UserService_SelectUsers_FullMethodName = "/UserService/SelectUsers"
	UserService_CreateUser_FullMethodName  = "/UserService/CreateUser"
	UserService_DeleteUser_FullMethodName  = "/UserService/DeleteUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	SelectUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (UserService_SelectUsersClient, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Void, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Void, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SelectUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (UserService_SelectUsersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_SelectUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSelectUsersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_SelectUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceSelectUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceSelectUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	SelectUsers(*Void, UserService_SelectUsersServer) error
	CreateUser(context.Context, *User) (*Void, error)
	DeleteUser(context.Context, *User) (*Void, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) SelectUsers(*Void, UserService_SelectUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectUsers not implemented")
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *User) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}

func (UnimplementedUserServiceServer) DeleteUser(context.Context, *User) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SelectUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).SelectUsers(m, &userServiceSelectUsersServer{ServerStream: stream})
}

type UserService_SelectUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceSelectUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceSelectUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SelectUsers",
			Handler:       _UserService_SelectUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/server/grpc/EventService.proto",
}
